{"pageProps":{"post":{"id":"wpxml-graph-structured-program-evolution","title":"プログラム自動生成に関する研究","content":"<html><head></head><body><div class=\"toc-wrapper\"><input type=\"checkbox\" class=\"toc-checkbox\" id=\"toc-checkbox-49ceh0u9v2\" checked><label class=\"toc-title\" for=\"toc-checkbox-49ceh0u9v2\">目次</label><nav class=\"toc\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#はじめに\">はじめに</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#graph-structured-program-evolution-grape\">Graph Structured Program Evolution (GRAPE)</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#先行研究\">先行研究</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#ノード関数の種類\">ノード関数の種類</a></li></ol></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#シミュレーション\">シミュレーション</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#まとめ\">まとめ</a></li></ol></nav></div><h2 id=\"はじめに\">はじめに<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#はじめに\"><svg class=\"icon icon-link\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" aria-labelledby=\"paperclipIconTitle\" stroke=\"#2329EE\" stroke-width=\"1\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" fill=\"none\" color=\"#131996\"><path d=\"M7.93517339,13.7795989 L15.1617306,6.55304173 C16.03921,5.67631227 17.4656766,5.67631227 18.343156,6.55304173 C19.2206355,7.43052116 19.2206355,8.85773771 18.343156,9.73521714 L8.40091248,19.5477137 C6.93619681,21.0124294 4.56325242,21.0124294 3.09853675,19.5477137 C1.63382108,18.083748 1.63382108,15.7093037 3.09853675,14.245338 L12.9335328,4.53783896 C14.9839848,2.48738701 18.3094068,2.48738701 20.3568588,4.53783896 C22.4088107,6.58904088 22.4088107,9.91146301 20.3583588,11.961915 L13.2390491,19.0819746\"></path></svg></a></h2>\n\n<p>先日 Google から <a href=\"https://ai.googleblog.com/2020/07/automl-zero-evolving-code-that-learns.html\" target=\"_blank\" rel=\"noreferrer noopener\" data-type=\"URL\" data-id=\"https://ai.googleblog.com/2020/07/automl-zero-evolving-code-that-learns.html\">AutoML-Zero</a> という機械学習のプログラムを自動生成する手法が発表された。</p>\n\n<p>プログラム自動生成手法自体は以前から多く存在したが、実用的なレベルのものが出てきたことで、今後はプログラムの自動生成に関する研究もより盛んに行われるものと考えらる。</p>\n\n<p>AutoML-Zero では遺伝的プログラミングにおいて突然変異のみによる探索を採用したような手法が採られているが、プログラム自動生成の手法は他にも、遺伝的ネットワークプログラミング、<strong><a rel=\"noreferrer noopener\" href=\"https://ynu.repo.nii.ac.jp/?action=pages_view_main&#x26;active_action=repository_view_main_item_detail&#x26;item_id=4884&#x26;item_no=1&#x26;page_id=59&#x26;block_id=74\" data-type=\"URL\" data-id=\"https://ynu.repo.nii.ac.jp/?action=pages_view_main&#x26;active_action=repository_view_main_item_detail&#x26;item_id=4884&#x26;item_no=1&#x26;page_id=59&#x26;block_id=74\" target=\"_blank\">GRAPE（Graph Structured Program Evolution）</a></strong>など様々な手法が存在する。</p>\n\n<p>本研究では GRAPE の改良に関する既存研究で採用されたノード関数の影響 及び 既存手法との組み合わせによるさらなる改良を提案する。</p>\n\n<h2 id=\"graph-structured-program-evolution-grape\">Graph Structured Program Evolution (GRAPE)<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#graph-structured-program-evolution-grape\"><svg class=\"icon icon-link\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" aria-labelledby=\"paperclipIconTitle\" stroke=\"#2329EE\" stroke-width=\"1\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" fill=\"none\" color=\"#131996\"><path d=\"M7.93517339,13.7795989 L15.1617306,6.55304173 C16.03921,5.67631227 17.4656766,5.67631227 18.343156,6.55304173 C19.2206355,7.43052116 19.2206355,8.85773771 18.343156,9.73521714 L8.40091248,19.5477137 C6.93619681,21.0124294 4.56325242,21.0124294 3.09853675,19.5477137 C1.63382108,18.083748 1.63382108,15.7093037 3.09853675,14.245338 L12.9335328,4.53783896 C14.9839848,2.48738701 18.3094068,2.48738701 20.3568588,4.53783896 C22.4088107,6.58904088 22.4088107,9.91146301 20.3583588,11.961915 L13.2390491,19.0819746\"></path></svg></a></h2>\n\n<p>GRAPE は遺伝子型が整数列、表現型がグラフ構造をとる遺伝的アルゴリズム手法であり、１つの個体は複数のノードとデータセットを持つ。</p>\n\n<p>１つのノードは</p>\n\n<ol><li>命令の種類</li><li>移動先</li><li>使用するデータセット</li></ol>\n\n<p>から構成され、複数のノードで構成されたプログラムはスタートノードから開始され、ノードの命令及び使用するデータセットによるデータの操作と移動先への遷移によってプログラムが順次実行され、出力ノードに達するとプログラムは停止し出力が得られる。</p>\n\n<h2 id=\"先行研究\">先行研究<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#先行研究\"><svg class=\"icon icon-link\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" aria-labelledby=\"paperclipIconTitle\" stroke=\"#2329EE\" stroke-width=\"1\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" fill=\"none\" color=\"#131996\"><path d=\"M7.93517339,13.7795989 L15.1617306,6.55304173 C16.03921,5.67631227 17.4656766,5.67631227 18.343156,6.55304173 C19.2206355,7.43052116 19.2206355,8.85773771 18.343156,9.73521714 L8.40091248,19.5477137 C6.93619681,21.0124294 4.56325242,21.0124294 3.09853675,19.5477137 C1.63382108,18.083748 1.63382108,15.7093037 3.09853675,14.245338 L12.9335328,4.53783896 C14.9839848,2.48738701 18.3094068,2.48738701 20.3568588,4.53783896 C22.4088107,6.58904088 22.4088107,9.91146301 20.3583588,11.961915 L13.2390491,19.0819746\"></path></svg></a></h2>\n\n<p>GRAPE によるプログラム自動生成のベンチマークとして特に成功率が低いフィボナッチ数列を求めるプログラムに着目する。</p>\n\n<figure class=\"wp-block-table is-style-regular\"><table><thead><tr><th class=\"has-text-align-left\" data-align=\"left\">論文</th><th>成功率</th></tr></thead><tbody><tr><td class=\"has-text-align-left\" data-align=\"left\">１．提案論文</td><td>0.06</td></tr><tr><td class=\"has-text-align-left\" data-align=\"left\">２．局所探索</td><td>0.14</td></tr><tr><td class=\"has-text-align-left\" data-align=\"left\">３．線形遺伝子型</td><td>0.19</td></tr><tr><td class=\"has-text-align-left\" data-align=\"left\">４．多様性維持探索</td><td>0.71</td></tr></tbody></table></figure>\n\n<ol><li><a rel=\"noreferrer noopener\" href=\"https://www.jstage.jst.go.jp/article/ieejeiss/128/3/128_3_370/_pdf/-char/ja\" target=\"_blank\">Graph Structured Program Evolution によるプログラムの自動生成</a></li><li><a rel=\"noreferrer noopener\" href=\"https://www.ieice.org/publications/conference-FIT-DVDs/FIT2009/pdf/A/A_001.pdf\" target=\"_blank\">グラフ構造のプログラム自動生成手法のための子個体生成方法の提案</a></li><li><a rel=\"noreferrer noopener\" href=\"https://www.ieice.org/~iss/jpn/Publications/issposter_2018/data/pdf/ISS-SP-050.pdf\" target=\"_blank\">線形遺伝子型を導入したグラフ構造 GP</a></li><li><a rel=\"noreferrer noopener\" href=\"https://ipsj.ixsq.nii.ac.jp/ej/?action=repository_uri&#x26;item_id=82750&#x26;file_id=1&#x26;file_no=1\" target=\"_blank\">プログラム自動生成手法における個体の多様性維持の提案</a></li></ol>\n\n<p>明らかに４．の研究の成功率が高く、論文では多様性の維持による成果だと結論づけている。</p>\n\n<p>しかし探索方法以外を提案論文と同様の設定で再現実験をしたところ、論文のような高い成功率にはならなかった。</p>\n\n<h3 id=\"ノード関数の種類\">ノード関数の種類<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#ノード関数の種類\"><svg class=\"icon icon-link\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" aria-labelledby=\"paperclipIconTitle\" stroke=\"#2329EE\" stroke-width=\"1\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" fill=\"none\" color=\"#131996\"><path d=\"M7.93517339,13.7795989 L15.1617306,6.55304173 C16.03921,5.67631227 17.4656766,5.67631227 18.343156,6.55304173 C19.2206355,7.43052116 19.2206355,8.85773771 18.343156,9.73521714 L8.40091248,19.5477137 C6.93619681,21.0124294 4.56325242,21.0124294 3.09853675,19.5477137 C1.63382108,18.083748 1.63382108,15.7093037 3.09853675,14.245338 L12.9335328,4.53783896 C14.9839848,2.48738701 18.3094068,2.48738701 20.3568588,4.53783896 C22.4088107,6.58904088 22.4088107,9.91146301 20.3583588,11.961915 L13.2390491,19.0819746\"></path></svg></a></h3>\n\n<p>４．の研究はここに挙げた他の論文とは異なり著者はアルゴリズムの提案者ではない。</p>\n\n<p>そのためか実験の条件が異なる点がいくつか存在し、特にノード関数に Swap が含まれるという点で大きく異なる。</p>\n\n<p>後述するいくつかの改善を行った提案手法と、その提案手法から Swap を除いた手法で大きく成功率が変わることを確認した。</p>\n\n<p>Swap が含まれる手法で実際に生成されたプログラムは以下のようなものである。</p>\n\n<pre class=\"language-javascript\" style=\"background: #2e3440\"><code class=\"language-javascript\"><span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">main</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">input</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #81A1C1\">const</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> []</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">push</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #81A1C1\">...</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #81A1C1\">...</span><span style=\"color: #88C0D0\">Array</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #B48EAD\">3</span><span style=\"color: #D8DEE9FF\">)]</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">map</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=></span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">push</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #81A1C1\">...</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #81A1C1\">...</span><span style=\"color: #88C0D0\">Array</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #B48EAD\">3</span><span style=\"color: #D8DEE9FF\">)]</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">map</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=></span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">push</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #81A1C1\">...</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #81A1C1\">...</span><span style=\"color: #88C0D0\">Array</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #B48EAD\">4</span><span style=\"color: #D8DEE9FF\">)]</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">map</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=></span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">input</span><span style=\"color: #D8DEE9FF\">))</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">func9</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">input</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">func9</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">input</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">\t[</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">5</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\">]] </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> [</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">5</span><span style=\"color: #D8DEE9FF\">]]</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">func13</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">input</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">func13</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">input</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #81A1C1\">while</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #81A1C1\">true</span><span style=\"color: #D8DEE9FF\">)</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">\t\t</span><span style=\"color: #81A1C1\">if</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">3</span><span style=\"color: #D8DEE9FF\">] </span><span style=\"color: #81A1C1\">&#x3C;=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">input</span><span style=\"color: #D8DEE9FF\">)</span>\n<span style=\"color: #D8DEE9FF\">\t\t</span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">\t\t\t</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">3</span><span style=\"color: #D8DEE9FF\">] </span><span style=\"color: #81A1C1\">+=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t\t\t</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\">] </span><span style=\"color: #81A1C1\">+=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">5</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t\t\t[</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">5</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\">]] </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> [</span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">0</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">5</span><span style=\"color: #D8DEE9FF\">]]</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t\t\t</span><span style=\"color: #81A1C1\">continue;</span>\n<span style=\"color: #D8DEE9FF\">\t\t</span><span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #D8DEE9FF\">\t\t</span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">data</span><span style=\"color: #D8DEE9FF\">[</span><span style=\"color: #B48EAD\">5</span><span style=\"color: #D8DEE9FF\">]</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #ECEFF4\">}</span>\n<span style=\"color: #ECEFF4\">}</span></code></pre>\n\n<p>Swap がない場合、以下のように３つの変数を使用して和を求める処理と一つ前の値を代入する処理２回の計３回の処理をループ内で行う必要がある。</p>\n\n<pre class=\"language-javascript\" style=\"background: #2e3440\"><code class=\"language-javascript\"><span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #88C0D0\">main</span><span style=\"color: #ECEFF4\">(</span><span style=\"color: #D8DEE9\">input</span><span style=\"color: #ECEFF4\">)</span>\n<span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">f0</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">f1</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #ECEFF4\">,</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">f2</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">1</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #81A1C1\">for</span><span style=\"color: #D8DEE9FF\"> (</span><span style=\"color: #81A1C1\">let</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">i</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #B48EAD\">0</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">i</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">&#x3C;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">input</span><span style=\"color: #81A1C1\">;</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">++</span><span style=\"color: #D8DEE9\">i</span><span style=\"color: #D8DEE9FF\">) </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #D8DEE9FF\">\t\t</span><span style=\"color: #D8DEE9\">f0</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">f1</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">+</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">f2</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t\t</span><span style=\"color: #D8DEE9\">f2</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">f1</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t\t</span><span style=\"color: #D8DEE9\">f1</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #81A1C1\">=</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">f0</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #ECEFF4\">}</span>\n\n<span style=\"color: #D8DEE9FF\">\t</span><span style=\"color: #81A1C1\">return</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #D8DEE9\">f0</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span></code></pre>\n\n<p>Swap によって計算に必要な変数が２つになり、Swap と加算処理の計２回の処理をループ内で行うことになり、プログラムの生成が容易になっている。</p>\n\n<p>したがってこの既存研究で結論付けられているような多様性が成功率上昇の主要因ではなく、使用されるノード関数が与えられた問題に有利に働いた結果によるものだと考えられる。</p>\n\n<h2 id=\"シミュレーション\">シミュレーション<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#シミュレーション\"><svg class=\"icon icon-link\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" aria-labelledby=\"paperclipIconTitle\" stroke=\"#2329EE\" stroke-width=\"1\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" fill=\"none\" color=\"#131996\"><path d=\"M7.93517339,13.7795989 L15.1617306,6.55304173 C16.03921,5.67631227 17.4656766,5.67631227 18.343156,6.55304173 C19.2206355,7.43052116 19.2206355,8.85773771 18.343156,9.73521714 L8.40091248,19.5477137 C6.93619681,21.0124294 4.56325242,21.0124294 3.09853675,19.5477137 C1.63382108,18.083748 1.63382108,15.7093037 3.09853675,14.245338 L12.9335328,4.53783896 C14.9839848,2.48738701 18.3094068,2.48738701 20.3568588,4.53783896 C22.4088107,6.58904088 22.4088107,9.91146301 20.3583588,11.961915 L13.2390491,19.0819746\"></path></svg></a></h2>\n\n<p>提案手法に以下の改善を追加した結果、成功率は１００％になった。</p>\n\n<ol><li>ループ維持のための評価値の導入（学外未発表のため詳細は非公開）</li><li>局所探索＋島分割（２．の論文＋α）</li><li>初期データの変更（入力値と１ => 入力値と０と１）</li><li>Forノードの導入（４．の論文）</li><li>Swapノードの導入（４．の論文）</li></ol>\n\n<p>２．の論文での局所探索では親個体を入れ替えながら子個体を生成するが、プログラム高速化のため子個体生成は選択された親個体からのみ生成した。</p>\n\n<p>テストデータでも成功したときの進捗度[0, 1]を記録し、より早く生成が完了するパラメータをざっくりとグリッドサーチを行った。</p>\n\n<figure class=\"wp-block-table\"><table><tbody><tr><td>人口</td><td>100</td></tr><tr><td>島数</td><td>100</td></tr><tr><td>突然変異率</td><td>0.05</td></tr><tr><td>局所子個体数</td><td>5</td></tr></tbody></table></figure>\n\n<figure class=\"wp-block-image size-large\"><img src=\"https://raw.githubusercontent.com/technote-space/my-blog-assets/main/uploads/2020/09/grape.png\" alt=\"\" class=\"wp-image-2325\"><figcaption>進捗度ごとの成功数</figcaption></figure>\n\n<p>ブラウザで動作するデモ<br></p><div class=\"blog-card\"><iframe src=\"https://blog-card-ten.vercel.app/card/https%3A%2F%2Ftechnote-space.github.io%2Fga-framework%2Fsamples%2Fautomatic-programming%2F?id=blog-card-pjcsp4igb1&#x26;referrer=https%3A%2F%2Ftechnote.space%2Fposts%2Fwpxml-graph-structured-program-evolution%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" data-id=\"blog-card-pjcsp4igb1\"></iframe></div><p></p>\n\n<h2 id=\"まとめ\">まとめ<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#まとめ\"><svg class=\"icon icon-link\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" aria-labelledby=\"paperclipIconTitle\" stroke=\"#2329EE\" stroke-width=\"1\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" fill=\"none\" color=\"#131996\"><path d=\"M7.93517339,13.7795989 L15.1617306,6.55304173 C16.03921,5.67631227 17.4656766,5.67631227 18.343156,6.55304173 C19.2206355,7.43052116 19.2206355,8.85773771 18.343156,9.73521714 L8.40091248,19.5477137 C6.93619681,21.0124294 4.56325242,21.0124294 3.09853675,19.5477137 C1.63382108,18.083748 1.63382108,15.7093037 3.09853675,14.245338 L12.9335328,4.53783896 C14.9839848,2.48738701 18.3094068,2.48738701 20.3568588,4.53783896 C22.4088107,6.58904088 22.4088107,9.91146301 20.3583588,11.961915 L13.2390491,19.0819746\"></path></svg></a></h2>\n\n<p>本研究ではプログラム自動生成手法の性能向上に関する先行研究の改善要因の検討を行い、別の改善方法との組み合わせによる提案手法によりフィボナッチ数列を求めるプログラムの自動生成をほぼ確実なものにできることを示した。</p>\n\n<p>より複雑なプログラムである機械学習のプログラムの自動生成手法として登場した AutoML-Zero などの手法でも、有効かつ合理的なノード関数があれば性能向上が望めると考えられる。</p>\n\n<p>GRAPE は 非コード領域を持つ点や一般的な遺伝的アルゴリズムの遺伝的操作の適用が可能な点などAutoML-Zero の個体には存在しないいくつかの特徴があるので、機械学習のプログラム自動生成の探索方法として試してみたい。</p>\n<!-- /wp:paragraph --></body></html>","excerpt":"はじめに 先日 Google から AutoML-Zero という機械学習のプログラムを自動生成する手法が発表された。 プログラム自動生成手法自体は以前から多く存在したが、実用的なレベルのものが出てきたことで、今後はプログラムの自動生成に関...","postType":"post","tags":[{"slug":"grape","name":"GRAPE"},{"slug":"%e7%a0%94%e7%a9%b6","name":"研究"},{"slug":"%e8%87%aa%e5%8b%95%e7%94%9f%e6%88%90","name":"自動生成"}],"thumbnail":null,"dominantColor":null,"createdAt":"2020-09-15T11:49:07.000Z","updatedAt":null},"prev":null,"next":{"id":"markdown-2021-09-27-test-toc","title":"目次の動作テスト","excerpt":"目次の動作テスト 見出し２のテスト１  これは１つめの見出し２です。  見出し２のテスト２  これは２つめの見出し２です。  見出し３のテスト１  これは１つめの見出し３です。  見出し３のテスト２  これは２つめの見出し３です。  見出し...","postType":"post","thumbnail":"/images/pet_cat_oddeye_black.png","createdAt":"2021-09-26T15:00:00.000Z","updatedAt":"2021-11-06T15:00:00.000Z"},"headerPages":[],"footerPages":[{"label":"About","url":"/pages/wpxml-about/"},{"label":"プライバシーポリシー","url":"/pages/wpxml-privacy-policy/"},{"label":"お問い合わせ","url":"/pages/wpxml-contact/"}]},"__N_SSG":true}