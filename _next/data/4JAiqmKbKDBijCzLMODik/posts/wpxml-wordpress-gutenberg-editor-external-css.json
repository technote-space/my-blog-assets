{"pageProps":{"post":{"id":"wpxml-wordpress-gutenberg-editor-external-css","title":"Gutenbergエディタにテーマ以外の外部CSSを追加する方法","content":"<html><head></head><body><div class=\"toc-wrapper\"><input type=\"checkbox\" class=\"toc-checkbox\" id=\"toc-checkbox-oj4v0b75n6\" checked><label class=\"toc-title\" for=\"toc-checkbox-oj4v0b75n6\">目次</label><nav class=\"toc\"><ol class=\"toc-level toc-level-1\"><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#block_editor_settingsフィルタ\">「block_editor_settings」フィルタ</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#スタイルを調整する\">スタイルを調整する</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#クラスを付与する\">クラスを付与する</a></li><li class=\"toc-item toc-item-h2\"><a class=\"toc-link toc-link-h2\" href=\"#まとめ\">まとめ</a></li></ol></nav></div><p>テーマのCSSをエディタに適用することで公開後のデザインに近づけることができます。</p>\n\n<p>今までのクラシックエディタではテーマディレクトリ配下のCSSを「add_editor_style」を使用して追加することができました。</p>\n\n<p>この方法で追加していた場合は以下のコードを追加することで<span class=\"double-underline\">Gutenbergエディタ（ブロックエディタ）のみに適用されるように自動でCSSを読み込んでくれます。</span></p>\n\n<pre class=\"language-php\" style=\"background: #2e3440\"><code class=\"language-php\"><span style=\"color: #D8DEE9FF\">add_theme_support( 'editor-styles' );</span></code></pre>\n\n<p>テーマディレクトリ以外の場合、今までは「editor_stylesheets」フィルタなどをフックして登録していましたが、これで登録されたものはブロックエディタには反映されません。</p>\n\n<p>ブロックエディタに反映させるためには「enqueue_block_editor_assets」アクションをフックし、そこで「wp_enqueue_style」を使用して任意のCSSを追加できます。</p>\n\n<p>しかしこの方法で追加されたCSSは<span class=\"double-underline\">管理画面全体のデザインに影響を与える可能性</span>があります。</p>\n\n<div class=\"blog-card\"><iframe src=\"https://blog-card-ten.vercel.app/card/https%3A%2F%2Ftechnote.space%2Fwordpress%2Fgutenberg-editor-css-summary?id=blog-card-ja87v2q21i&#x26;referrer=https%3A%2F%2Ftechnote.space%2Fposts%2Fwpxml-wordpress-gutenberg-editor-external-css%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" data-id=\"blog-card-ja87v2q21i\"></iframe></div>\n\n<p>それを避けたい場合は以下で紹介する方法を検討してください。</p>\n\n<h2 id=\"block_editor_settingsフィルタ\">「block_editor_settings」フィルタ<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#block_editor_settingsフィルタ\"><svg class=\"icon icon-link\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" aria-labelledby=\"paperclipIconTitle\" stroke=\"#2329EE\" stroke-width=\"1\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" fill=\"none\" color=\"#131996\"><path d=\"M7.93517339,13.7795989 L15.1617306,6.55304173 C16.03921,5.67631227 17.4656766,5.67631227 18.343156,6.55304173 C19.2206355,7.43052116 19.2206355,8.85773771 18.343156,9.73521714 L8.40091248,19.5477137 C6.93619681,21.0124294 4.56325242,21.0124294 3.09853675,19.5477137 C1.63382108,18.083748 1.63382108,15.7093037 3.09853675,14.245338 L12.9335328,4.53783896 C14.9839848,2.48738701 18.3094068,2.48738701 20.3568588,4.53783896 C22.4088107,6.58904088 22.4088107,9.91146301 20.3583588,11.961915 L13.2390491,19.0819746\"></path></svg></a></h2>\n\n<p><span data-ma_color1=\"1\" class=\"double-underline\">「block_editor_settings」フィルタ</span>はブロックエディタに渡す設定を上書きできます。</p>\n\n<pre class=\"language-php\" style=\"background: #2e3440\"><code class=\"language-php\"><span style=\"color: #D8DEE9FF\">add_filter ( 'block_editor_settings', function( $editor_settings, $post ) {</span>\n<span style=\"color: #D8DEE9FF\">   /** @var array $editor_settings */</span>\n<span style=\"color: #D8DEE9FF\">   /** @var WP_Post $post */</span>\n\n<span style=\"color: #D8DEE9FF\">...</span>\n\n<span style=\"color: #D8DEE9FF\">   return $editor_settings;</span>\n<span style=\"color: #D8DEE9FF\">}, 10, 2 );</span></code></pre>\n\n<p>$editor_settings の styles にはWordPressがデフォルトで追加したCSS（font-familyなど）と上で紹介した「add_editor_style」で登録されたCSSが入っています。</p>\n\n<p>フィルタ内でこの<span class=\"double-underline\">「styles」に追加や上書きをする</span>ことで管理画面全体に影響を与えない方法で読み込んでくれるようになります。</p>\n\n<p>具体的には「wp-admin/edit-form-blocks.php」を「'editor-styles'」で検索してヒットしたあたりのコードを参考に実装が可能です。</p>\n\n<ul><li>クラシックエディタ用のCSSファイルを列挙する「get_classic_editor_styles」</li><li>ローカルファイルかどうかを判定する「is_local_file」</li><li>ローカルパスをURLに変換する「convert_to_url」</li></ul>\n\n<p>のような関数を用意しておくと実装は以下のようになります。</p>\n\n<pre class=\"language-php\" style=\"background: #2e3440\"><code class=\"language-php\"><span style=\"color: #D8DEE9FF\">add_filter ( 'block_editor_settings', function( $editor_settings ) {</span>\n<span style=\"color: #D8DEE9FF\">   /** @var array $editor_settings */</span>\n<span style=\"color: #D8DEE9FF\">   // $styles = $editor_settings['styles'];</span>\n<span style=\"color: #D8DEE9FF\">   $styles = [];</span>\n<span style=\"color: #D8DEE9FF\">   foreach ( get_classic_editor_styles() as $path ) {</span>\n<span style=\"color: #D8DEE9FF\">      if ( ! is_local_file( $path ) ) {</span>\n<span style=\"color: #D8DEE9FF\">         $response = wp_remote_get( $path );</span>\n<span style=\"color: #D8DEE9FF\">         if ( ! is_wp_error( $response ) ) {</span>\n<span style=\"color: #D8DEE9FF\">            $styles[] = [</span>\n<span style=\"color: #D8DEE9FF\">               'css' => wp_remote_retrieve_body( $response ),</span>\n<span style=\"color: #D8DEE9FF\">            ];</span>\n<span style=\"color: #D8DEE9FF\">         }</span>\n<span style=\"color: #D8DEE9FF\">      } else {</span>\n<span style=\"color: #D8DEE9FF\">         if ( file_exists( $path ) ) {</span>\n<span style=\"color: #D8DEE9FF\">            $styles[] = [</span>\n<span style=\"color: #D8DEE9FF\">               'css'     => file_get_contents( $path ),</span>\n<span style=\"color: #D8DEE9FF\">               'baseURL' => convert_to_url( $item ),</span>\n<span style=\"color: #D8DEE9FF\">            ];</span>\n<span style=\"color: #D8DEE9FF\">         }</span>\n<span style=\"color: #D8DEE9FF\">      }</span>\n<span style=\"color: #D8DEE9FF\">   }</span>\n<span style=\"color: #D8DEE9FF\">   $editor_settings['styles'] = $styles;</span>\n\n<span style=\"color: #D8DEE9FF\">   return $editor_settings;</span>\n<span style=\"color: #D8DEE9FF\">} );</span></code></pre>\n\n<h2 id=\"スタイルを調整する\">スタイルを調整する<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#スタイルを調整する\"><svg class=\"icon icon-link\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" aria-labelledby=\"paperclipIconTitle\" stroke=\"#2329EE\" stroke-width=\"1\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" fill=\"none\" color=\"#131996\"><path d=\"M7.93517339,13.7795989 L15.1617306,6.55304173 C16.03921,5.67631227 17.4656766,5.67631227 18.343156,6.55304173 C19.2206355,7.43052116 19.2206355,8.85773771 18.343156,9.73521714 L8.40091248,19.5477137 C6.93619681,21.0124294 4.56325242,21.0124294 3.09853675,19.5477137 C1.63382108,18.083748 1.63382108,15.7093037 3.09853675,14.245338 L12.9335328,4.53783896 C14.9839848,2.48738701 18.3094068,2.48738701 20.3568588,4.53783896 C22.4088107,6.58904088 22.4088107,9.91146301 20.3583588,11.961915 L13.2390491,19.0819746\"></path></svg></a></h2>\n\n<p>フロント用のCSSなので、管理画面に埋め込まれたエディタでは表示が崩れることがあります。</p>\n\n<p>そういう場合には先ほどの「enqueue_block_editor_assets」で調整用のCSSを読み込ませて表示を修正できます。</p>\n\n<h2 id=\"クラスを付与する\">クラスを付与する<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#クラスを付与する\"><svg class=\"icon icon-link\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" aria-labelledby=\"paperclipIconTitle\" stroke=\"#2329EE\" stroke-width=\"1\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" fill=\"none\" color=\"#131996\"><path d=\"M7.93517339,13.7795989 L15.1617306,6.55304173 C16.03921,5.67631227 17.4656766,5.67631227 18.343156,6.55304173 C19.2206355,7.43052116 19.2206355,8.85773771 18.343156,9.73521714 L8.40091248,19.5477137 C6.93619681,21.0124294 4.56325242,21.0124294 3.09853675,19.5477137 C1.63382108,18.083748 1.63382108,15.7093037 3.09853675,14.245338 L12.9335328,4.53783896 C14.9839848,2.48738701 18.3094068,2.48738701 20.3568588,4.53783896 C22.4088107,6.58904088 22.4088107,9.91146301 20.3583588,11.961915 L13.2390491,19.0819746\"></path></svg></a></h2>\n\n<p>フロント側で付与されているクラスがエディタでは付与されないためデザインが崩れることがあります。</p>\n\n<p>そういう場合にも先ほどの「enqueue_block_editor_assets」を使用することで解決できます。</p>\n\n<ol><li>「wp_enqueue_script」を使用してJSファイルを読み込み</li><li>「wp.domReady」にクラスを付与するコールバックを登録</li></ol>\n\n<pre class=\"language-js\" style=\"background: #2e3440\"><code class=\"language-js\"><span style=\"color: #D8DEE9\">wp</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">domReady</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #81A1C1\">function</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">()</span><span style=\"color: #D8DEE9FF\"> </span><span style=\"color: #ECEFF4\">{</span>\n<span style=\"color: #ECEFF4\">    </span><span style=\"color: #4C566A\">// add body class</span>\n<span style=\"color: #D8DEE9FF\">    </span><span style=\"color: #88C0D0\">$</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">#editor .editor-writing-flow</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #ECEFF4\">.</span><span style=\"color: #88C0D0\">addClass</span><span style=\"color: #D8DEE9FF\">(</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #A3BE8C\">article main</span><span style=\"color: #ECEFF4\">'</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span>\n<span style=\"color: #ECEFF4\">}</span><span style=\"color: #D8DEE9FF\">)</span><span style=\"color: #81A1C1\">;</span></code></pre>\n\n<div class=\"blog-card\"><iframe src=\"https://blog-card-ten.vercel.app/card/https%3A%2F%2Ftechnote.space%2Fwordpress%2Fgutenberg-domready?id=blog-card-gdaeeho6dc&#x26;referrer=https%3A%2F%2Ftechnote.space%2Fposts%2Fwpxml-wordpress-gutenberg-editor-external-css%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" data-id=\"blog-card-gdaeeho6dc\"></iframe></div>\n\n<h2 id=\"まとめ\">まとめ<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#まとめ\"><svg class=\"icon icon-link\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewBox=\"0 0 24 24\" aria-labelledby=\"paperclipIconTitle\" stroke=\"#2329EE\" stroke-width=\"1\" stroke-linecap=\"square\" stroke-linejoin=\"miter\" fill=\"none\" color=\"#131996\"><path d=\"M7.93517339,13.7795989 L15.1617306,6.55304173 C16.03921,5.67631227 17.4656766,5.67631227 18.343156,6.55304173 C19.2206355,7.43052116 19.2206355,8.85773771 18.343156,9.73521714 L8.40091248,19.5477137 C6.93619681,21.0124294 4.56325242,21.0124294 3.09853675,19.5477137 C1.63382108,18.083748 1.63382108,15.7093037 3.09853675,14.245338 L12.9335328,4.53783896 C14.9839848,2.48738701 18.3094068,2.48738701 20.3568588,4.53783896 C22.4088107,6.58904088 22.4088107,9.91146301 20.3583588,11.961915 L13.2390491,19.0819746\"></path></svg></a></h2>\n\n<pre class=\"language-php\" style=\"background: #2e3440\"><code class=\"language-php\"><span style=\"color: #D8DEE9FF\">add_theme_support( 'editor-styles' );</span></code></pre>\n\n<p>と「editor_stylesheets」だけで済むのが一番よいと思います。</p>\n\n<p>テーマ配下にないCSSを使用する場合は<span class=\"double-underline\">「block_editor_settings」を使用</span>することで管理画面全体に影響を与えないように追加できます。</p>\n\n<p>エディタ用の調整は「enqueue_block_editor_assets」アクション内で登録したCSSやJSを使用して調整するとよいでしょう。</p>\n<!-- /wp:paragraph --></body></html>","excerpt":"テーマのCSSをエディタに適用することで公開後のデザインに近づけることができます。 今までのクラシックエディタではテーマディレクトリ配下のCSSを「add_editor_style」を使用して追加することができました。 この方法で追加してい...","postType":"post","tags":[{"slug":"gutenberg","name":"Gutenberg"},{"slug":"%e3%83%96%e3%83%ad%e3%83%83%e3%82%af%e3%82%a8%e3%83%87%e3%82%a3%e3%82%bf","name":"ブロックエディタ"}],"thumbnail":"https://technote.space/uploads/2018/12/banner-772x250.jpg","dominantColor":"rgba(111,111,111,1)","createdAt":"2018-12-20T20:57:43.000Z","updatedAt":null},"prev":{"id":"wpxml-wordpress-gutenberg-switch-block-editor","title":"Gutenbergのビジュアルエディタとコードエディタの切り替えなどを検出する方法","excerpt":"ブロックエディタには「ビジュアルエディター」と「コードエディター」の二種類のエディタが用意されており、気軽に切り替えることができます。 * ビジュアルエディター * コードエディター    エディタにデザインを適用させるためにクラスを付与し...","postType":"post","tags":[{"slug":"gutenberg","name":"Gutenberg"},{"slug":"%e3%83%96%e3%83%ad%e3%83%83%e3%82%af%e3%82%a8%e3%83%87%e3%82%a3%e3%82%bf","name":"ブロックエディタ"}],"thumbnail":"https://technote.space/uploads/2018/12/banner-772x250.jpg","createdAt":"2018-12-23T18:31:00.000Z","updatedAt":null},"next":{"id":"wpxml-wordpress-gutenberg-editor-css-summary","title":"Gutenbergエディタとクラシックエディタの判定やCSSの読み込み方法まとめ","excerpt":"エディタの判定 以下の方法でGutenbergエディタ（ブロックエディタ）とクラシックエディタを判定することが可能です。 is_block_editorはWordPress5.0から使用できるメソッドです。 WordPress5.0未満でプ...","postType":"post","tags":[{"slug":"gutenberg","name":"Gutenberg"},{"slug":"%e3%82%af%e3%83%a9%e3%82%b7%e3%83%83%e3%82%af%e3%82%a8%e3%83%87%e3%82%a3%e3%82%bf","name":"クラシックエディタ"},{"slug":"%e3%83%96%e3%83%ad%e3%83%83%e3%82%af%e3%82%a8%e3%83%87%e3%82%a3%e3%82%bf","name":"ブロックエディタ"}],"thumbnail":"https://technote.space/uploads/2018/12/banner-772x250.jpg","createdAt":"2018-12-13T10:18:18.000Z","updatedAt":null},"headerPages":[],"footerPages":[{"label":"About","url":"/pages/wpxml-about/"},{"label":"プライバシーポリシー","url":"/pages/wpxml-privacy-policy/"},{"label":"お問い合わせ","url":"/pages/wpxml-contact/"}]},"__N_SSG":true}